// 01. Grammar.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    std::cout << "Hello World!\n";

    system("pause"); // 일시 정지
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.



/*
    CPU : 컴퓨터의 두뇌 - 명령 + 계산 장치 
    RAM(메모리)     - 데이터를 저장 - 휘발성 메모리(전원이 꺼지면 데이터가 사라진다.) - 속도가 매우 빠르다.
    HDD(하드디스크) - 데이터를 저장 - 비휘발성 메모리(전원이 꺼져도 데이터 유지) - 속도가 느리다.
    GPU(그래픽카드) - 많은 이미지를 출력하기 위한 장치
*/

/* F5 누르면 발생하는 일들
1. 빌드 - 우리가 만든 소스코드를 실행 가능한 파일로 만드는 것
2. 실행 - 실행 가능한 파일을 실행 하는것

빌드 과정
번역 + 파일 생성

컴파일 

컴퓨터가 알아 들을 수 있는 언어로 번역 01010000
번역된 파일을 합쳐서 파일 생성

전처리 - 컴파일 - 어셈블 : 컴퓨터 언어로 번역

전처리 - 앞에 #이 붙은 문법
라이브러리(기능 사전) 가져오거나
#include(포함하다.) 파일을 가져오기
#define APPLE 100 - 정의

컴파일러 - 컴파일
소스 코드를 어셈블리어로 변경한다.

어셈블 
어셈블리어를 컴퓨터 언어로 바꾼다.
obj 파일 생성 (목적 파일)

Store.cpp - Store.obj
player.cpp - player.obj
tower.cpp - tower.obj


링크 - 번역된 파일을 합치는 과정
번역된 obj파일을 하나의 실행 파일로 합쳐서 exe 파일을 만든다.
.apk
.ipa
*/